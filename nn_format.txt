nn.style:

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.layers = nn.Sequential(
            nn.Conv2d(3, 64, 3, 1, 1)
            nn.ReLU(),
            nn.BatchNorm2d(64)
            nn.MaxPool2d(2, 2)
            ...
        )
        self.classifier = nn.Sequential(
            nn.Linear(pt_util.num_flat_features, u)
            nn.ReLU(),
            nn.Linear(u, num_classes)
        )

    def forward(self, x):
        x = self.layers(x)
        x = x.view(-1, pt_util.num_flat_features)
        x = self.classifier(x)

    def loss(self, prediction, label, reduction='mean'):
        loss_fn = nn.CrossEntropyLoss(reduction=reduction)
        loss = loss_fn(prediction, label.squeeze().long())
        return loss

    def num_flat_features(self, x):
        size = x.size()[1:]
        num_features = 1
        for s in size:
            num_features *= s
        return num_features



pt_util:
 - TODO: num_flat_features(x)
 - TODO: mean&std_dev

